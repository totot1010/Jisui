// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザー
model User {
  id        String        @id @default(cuid())
  username  String        @db.VarChar(50)
  email     String        @unique
  password  String
  createAt  DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  posts     Post[]
  likes     PostLike[]
  comments  PostComment[]
}

// 投稿
model Post {
  id        String        @id @default(cuid())
  title     String
  price     Int
  createAt  DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  likes     PostLike[]
  comments  PostComment[]
  images    PostImage[]
}

// 投稿に対する画像
model PostImage {
  id        String   @id @default(cuid())
  url       String
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
}

// 投稿に対するいいね
model PostLike {
  id        String   @id @default(cuid())
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  // 1ユーザーが1つの投稿に対して1回しかいいねできないようにする
  @@unique([postId, userId])
}

// 投稿に対するコメント
model PostComment {
  id        String   @id @default(cuid())
  content   String
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  // コメントは自由
}
